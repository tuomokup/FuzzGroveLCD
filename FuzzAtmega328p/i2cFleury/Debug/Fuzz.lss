
Fuzz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e0a  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001465  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b4  00000000  00000000  00002415  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000912  00000000  00000000  00002dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ca  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d99  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__fp_szero+0x2>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ea e0       	ldi	r30, 0x0A	; 10
  fe:	fe e0       	ldi	r31, 0x0E	; 14
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 31       	cpi	r26, 0x10	; 16
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>
 10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
 110:	0c 94 03 07 	jmp	0xe06	; 0xe06 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:
#define addr 0x3E      // device address of Grove LCD, see datasheet

//#include <stdlib.h>       //for itoa()

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	64 97       	sbiw	r28, 0x14	; 20
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	36 e7       	ldi	r19, 0x76	; 118
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	21 50       	subi	r18, 0x01	; 1
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	40 40       	sbci	r20, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x1a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x24>
 13c:	00 00       	nop
	_delay_ms(30);
	i2c_init();                             // initialize I2C library
 13e:	0e 94 af 01 	call	0x35e	; 0x35e <i2c_init>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9f e1       	ldi	r25, 0x1F	; 31
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x2e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x34>
 14c:	00 00       	nop
	
	_delay_ms(2);
	// write 0x75 to EEPROM address 5 (Byte Write)
	i2c_start_wait(addr<<I2C_WRITE);     // set device address and write mode
 14e:	8c e7       	ldi	r24, 0x7C	; 124
 150:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <i2c_start_wait>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	9a e6       	ldi	r25, 0x6A	; 106
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x3e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x44>
	_delay_us(20);
	i2c_write(LCD_SETDDRAMADDR);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 11 02 	call	0x422	; 0x422 <i2c_write>
 162:	2a e6       	ldi	r18, 0x6A	; 106
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x4c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x52>
	_delay_us(20);
	i2c_write(0x28);	//Brightness
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 11 02 	call	0x422	; 0x422 <i2c_write>
	i2c_stop();
 170:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9f e1       	ldi	r25, 0x1F	; 31
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x60>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x66>
 17e:	00 00       	nop
	_delay_ms(2);
	
	INSTRUCTIONset(addr, LCD_SETDDRAMADDR, 0x0C);
 180:	4c e0       	ldi	r20, 0x0C	; 12
 182:	60 e8       	ldi	r22, 0x80	; 128
 184:	8e e3       	ldi	r24, 0x3E	; 62
 186:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>
	INSTRUCTIONset(addr, LCD_SETDDRAMADDR, LCD_CLEARDISPLAY);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	60 e8       	ldi	r22, 0x80	; 128
 18e:	8e e3       	ldi	r24, 0x3E	; 62
 190:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>
	INSTRUCTIONset(addr, LCD_SETDDRAMADDR, 0x06);  //INPUT SET
 194:	46 e0       	ldi	r20, 0x06	; 6
 196:	60 e8       	ldi	r22, 0x80	; 128
 198:	8e e3       	ldi	r24, 0x3E	; 62
 19a:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x8a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x90>
 1a8:	00 00       	nop
	_delay_ms(2);
	
	adc_init();
 1aa:	0e 94 65 02 	call	0x4ca	; 0x4ca <adc_init>
	while(1)
	{
		//READING FIRST VALUE
		float analogValue = read_adc(0); // READ PC0 pin
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_adc>
 1b4:	bc 01       	movw	r22, r24
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatunsisf>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	39 ef       	ldi	r19, 0xF9	; 249
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	40 40       	sbci	r20, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0xac>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xb6>
 1ce:	00 00       	nop
		_delay_ms(20);
		float n = 12*analogValue/1024;
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e4       	ldi	r20, 0x40	; 64
 1d6:	51 e4       	ldi	r21, 0x41	; 65
 1d8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5a e3       	ldi	r21, 0x3A	; 58
 1e4:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
		char buf[20];
		ftoa(n,buf,2); // ftoa Converts a floating-point/double number to a string.
 1e8:	22 e0       	ldi	r18, 0x02	; 2
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	ae 01       	movw	r20, r28
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ftoa>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	99 ef       	ldi	r25, 0xF9	; 249
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0xe4>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0xee>
 206:	00 00       	nop
		_delay_ms(20);
		INSTRUCTIONset(addr, LCD_SETDDRAMADDR, 0x03);  // Shift to the first line
 208:	43 e0       	ldi	r20, 0x03	; 3
 20a:	60 e8       	ldi	r22, 0x80	; 128
 20c:	8e e3       	ldi	r24, 0x3E	; 62
 20e:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>
 212:	3f ef       	ldi	r19, 0xFF	; 255
 214:	49 ef       	ldi	r20, 0xF9	; 249
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	31 50       	subi	r19, 0x01	; 1
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x100>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x10a>
 222:	00 00       	nop
		_delay_ms(20);
		Print(addr, "Q1:-");
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	8e e3       	ldi	r24, 0x3E	; 62
 22a:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	29 ef       	ldi	r18, 0xF9	; 249
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	91 50       	subi	r25, 0x01	; 1
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x11c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x126>
 23e:	00 00       	nop
		_delay_ms(20);
		Print(addr, buf);
 240:	be 01       	movw	r22, r28
 242:	6f 5f       	subi	r22, 0xFF	; 255
 244:	7f 4f       	sbci	r23, 0xFF	; 255
 246:	8e e3       	ldi	r24, 0x3E	; 62
 248:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		Print(addr, " ");
 24c:	65 e0       	ldi	r22, 0x05	; 5
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	8e e3       	ldi	r24, 0x3E	; 62
 252:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		
		//READING SECOND VALUE
		INSTRUCTIONset(addr, LCD_SETDDRAMADDR, 0xC0);  // Shift to the second line
 256:	40 ec       	ldi	r20, 0xC0	; 192
 258:	60 e8       	ldi	r22, 0x80	; 128
 25a:	8e e3       	ldi	r24, 0x3E	; 62
 25c:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>
		analogValue = read_adc(1); // READ PC1 pin
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_adc>
 266:	bc 01       	movw	r22, r24
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatunsisf>
 270:	4f ef       	ldi	r20, 0xFF	; 255
 272:	29 ef       	ldi	r18, 0xF9	; 249
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	41 50       	subi	r20, 0x01	; 1
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	30 40       	sbci	r19, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x15e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x168>
 280:	00 00       	nop
		_delay_ms(20);
		n = 12*analogValue/1024;
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e4       	ldi	r20, 0x40	; 64
 288:	51 e4       	ldi	r21, 0x41	; 65
 28a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	5a e3       	ldi	r21, 0x3A	; 58
 296:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
		ftoa(n,buf,2);
 29a:	22 e0       	ldi	r18, 0x02	; 2
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	ae 01       	movw	r20, r28
 2a0:	4f 5f       	subi	r20, 0xFF	; 255
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ftoa>
 2a8:	4f ef       	ldi	r20, 0xFF	; 255
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	41 50       	subi	r20, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x196>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x1a0>
 2b8:	00 00       	nop
		_delay_ms(20);
		Print(addr, "Q2:-");
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	71 e0       	ldi	r23, 0x01	; 1
 2be:	8e e3       	ldi	r24, 0x3E	; 62
 2c0:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		Print(addr, buf);
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	8e e3       	ldi	r24, 0x3E	; 62
 2cc:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		
		//READING THIRD VALUE
		analogValue = read_adc(2); // READ PC2 pin
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_adc>
 2d6:	bc 01       	movw	r22, r24
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatunsisf>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	39 ef       	ldi	r19, 0xF9	; 249
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	40 40       	sbci	r20, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x1ce>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x1d8>
 2f0:	00 00       	nop
		_delay_ms(20);
		n = 12*analogValue/1024;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e4       	ldi	r20, 0x40	; 64
 2f8:	51 e4       	ldi	r21, 0x41	; 65
 2fa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e8       	ldi	r20, 0x80	; 128
 304:	5a e3       	ldi	r21, 0x3A	; 58
 306:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
		ftoa(n,buf,2);
 30a:	22 e0       	ldi	r18, 0x02	; 2
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	ae 01       	movw	r20, r28
 310:	4f 5f       	subi	r20, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ftoa>
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	99 ef       	ldi	r25, 0xF9	; 249
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	81 50       	subi	r24, 0x01	; 1
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	20 40       	sbci	r18, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x206>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x210>
 328:	00 00       	nop
		_delay_ms(20);
		Print(addr, " V:");
 32a:	6c e0       	ldi	r22, 0x0C	; 12
 32c:	71 e0       	ldi	r23, 0x01	; 1
 32e:	8e e3       	ldi	r24, 0x3E	; 62
 330:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		Print(addr, buf);
 334:	be 01       	movw	r22, r28
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	8e e3       	ldi	r24, 0x3E	; 62
 33c:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
		Print(addr, " ");
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	71 e0       	ldi	r23, 0x01	; 1
 344:	8e e3       	ldi	r24, 0x3E	; 62
 346:	0e 94 4a 02 	call	0x494	; 0x494 <Print>
 34a:	3f ef       	ldi	r19, 0xFF	; 255
 34c:	49 ef       	ldi	r20, 0xF9	; 249
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	31 50       	subi	r19, 0x01	; 1
 352:	40 40       	sbci	r20, 0x00	; 0
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x238>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x242>
 35a:	00 00       	nop
 35c:	28 cf       	rjmp	.-432    	; 0x1ae <main+0x96>

0000035e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}/* i2c_readNak */
 35e:	87 b1       	in	r24, 0x07	; 7
 360:	8f 7c       	andi	r24, 0xCF	; 207
 362:	87 b9       	out	0x07, r24	; 7
 364:	88 b1       	in	r24, 0x08	; 8
 366:	8f 7c       	andi	r24, 0xCF	; 207
 368:	88 b9       	out	0x08, r24	; 8
 36a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 36e:	88 e4       	ldi	r24, 0x48	; 72
 370:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 37a:	08 95       	ret

0000037c <i2c_start>:
 37c:	94 ea       	ldi	r25, 0xA4	; 164
 37e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 382:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 386:	99 23       	and	r25, r25
 388:	e4 f7       	brge	.-8      	; 0x382 <i2c_start+0x6>
 38a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 38e:	98 73       	andi	r25, 0x38	; 56
 390:	98 30       	cpi	r25, 0x08	; 8
 392:	11 f0       	breq	.+4      	; 0x398 <i2c_start+0x1c>
 394:	90 31       	cpi	r25, 0x10	; 16
 396:	91 f4       	brne	.+36     	; 0x3bc <i2c_start+0x40>
 398:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 39c:	84 e8       	ldi	r24, 0x84	; 132
 39e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a6:	88 23       	and	r24, r24
 3a8:	e4 f7       	brge	.-8      	; 0x3a2 <i2c_start+0x26>
 3aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	88 31       	cpi	r24, 0x18	; 24
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <i2c_start+0x44>
 3b4:	80 34       	cpi	r24, 0x40	; 64
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <i2c_start+0x48>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	08 95       	ret
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret

000003c8 <i2c_start_wait>:
 3c8:	94 ea       	ldi	r25, 0xA4	; 164
 3ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d2:	99 23       	and	r25, r25
 3d4:	e4 f7       	brge	.-8      	; 0x3ce <i2c_start_wait+0x6>
 3d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3da:	98 73       	andi	r25, 0x38	; 56
 3dc:	98 30       	cpi	r25, 0x08	; 8
 3de:	11 f0       	breq	.+4      	; 0x3e4 <i2c_start_wait+0x1c>
 3e0:	90 31       	cpi	r25, 0x10	; 16
 3e2:	91 f7       	brne	.-28     	; 0x3c8 <i2c_start_wait>
 3e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3e8:	94 e8       	ldi	r25, 0x84	; 132
 3ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ee:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3f2:	99 23       	and	r25, r25
 3f4:	e4 f7       	brge	.-8      	; 0x3ee <i2c_start_wait+0x26>
 3f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3fa:	98 73       	andi	r25, 0x38	; 56
 3fc:	90 32       	cpi	r25, 0x20	; 32
 3fe:	41 f4       	brne	.+16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 400:	94 e9       	ldi	r25, 0x94	; 148
 402:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 406:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 40a:	94 fd       	sbrc	r25, 4
 40c:	fc cf       	rjmp	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	dc cf       	rjmp	.-72     	; 0x3c8 <i2c_start_wait>
 410:	08 95       	ret

00000412 <i2c_stop>:
 412:	84 e9       	ldi	r24, 0x94	; 148
 414:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 418:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 41c:	84 fd       	sbrc	r24, 4
 41e:	fc cf       	rjmp	.-8      	; 0x418 <i2c_stop+0x6>
 420:	08 95       	ret

00000422 <i2c_write>:
 422:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 426:	84 e8       	ldi	r24, 0x84	; 132
 428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 42c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 430:	88 23       	and	r24, r24
 432:	e4 f7       	brge	.-8      	; 0x42c <i2c_write+0xa>
 434:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 438:	88 73       	andi	r24, 0x38	; 56
 43a:	88 32       	cpi	r24, 0x28	; 40
 43c:	11 f0       	breq	.+4      	; 0x442 <i2c_write+0x20>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	08 95       	ret
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret

00000446 <INSTRUCTIONset>:
/*************************************************************************
Sequence writing to i2c device
*************************************************************************/

uint8_t INSTRUCTIONset(uint8_t addre, uint8_t ADset, uint8_t command)
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	d6 2f       	mov	r29, r22
 44c:	c4 2f       	mov	r28, r20
	uint8_t ret = 1;
	if(i2c_start(addre<<I2C_WRITE)==0)     // set device address and write mode
 44e:	88 0f       	add	r24, r24
 450:	0e 94 be 01 	call	0x37c	; 0x37c <i2c_start>
 454:	81 11       	cpse	r24, r1
 456:	1a c0       	rjmp	.+52     	; 0x48c <INSTRUCTIONset+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 458:	8a e6       	ldi	r24, 0x6A	; 106
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <INSTRUCTIONset+0x14>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <INSTRUCTIONset+0x1a>
	{
		_delay_us(20);
		i2c_write(ADset);
 460:	8d 2f       	mov	r24, r29
 462:	0e 94 11 02 	call	0x422	; 0x422 <i2c_write>
 466:	8a e6       	ldi	r24, 0x6A	; 106
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <INSTRUCTIONset+0x22>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <INSTRUCTIONset+0x28>
		_delay_us(20);
		i2c_write(command);
 46e:	8c 2f       	mov	r24, r28
 470:	0e 94 11 02 	call	0x422	; 0x422 <i2c_write>
 474:	8a e6       	ldi	r24, 0x6A	; 106
 476:	8a 95       	dec	r24
 478:	f1 f7       	brne	.-4      	; 0x476 <INSTRUCTIONset+0x30>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <INSTRUCTIONset+0x36>
		_delay_us(20);
		i2c_stop();
 47c:	0e 94 09 02 	call	0x412	; 0x412 <i2c_stop>
 480:	85 ed       	ldi	r24, 0xD5	; 213
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <INSTRUCTIONset+0x3c>
 486:	00 00       	nop
		_delay_us(40);
		ret = 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	01 c0       	rjmp	.+2      	; 0x48e <INSTRUCTIONset+0x48>
Sequence writing to i2c device
*************************************************************************/

uint8_t INSTRUCTIONset(uint8_t addre, uint8_t ADset, uint8_t command)
{
	uint8_t ret = 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
		i2c_stop();
		_delay_us(40);
		ret = 0;
	}
	return ret;
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <Print>:
Printing string to lcd
*************************************************************************/


void Print(uint8_t addre, char *str)
{
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	f8 2e       	mov	r15, r24
 4a0:	8b 01       	movw	r16, r22
	int i;
	for(i=0; str[i]!=0; i++)
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <Print+0x1e>
	{
		INSTRUCTIONset(addre, LCD_SETCGRAMADDR, str[i]);	
 4a8:	60 e4       	ldi	r22, 0x40	; 64
 4aa:	8f 2d       	mov	r24, r15
 4ac:	0e 94 23 02 	call	0x446	; 0x446 <INSTRUCTIONset>


void Print(uint8_t addre, char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
 4b0:	21 96       	adiw	r28, 0x01	; 1
 4b2:	f8 01       	movw	r30, r16
 4b4:	ec 0f       	add	r30, r28
 4b6:	fd 1f       	adc	r31, r29
 4b8:	40 81       	ld	r20, Z
 4ba:	41 11       	cpse	r20, r1
 4bc:	f5 cf       	rjmp	.-22     	; 0x4a8 <Print+0x14>
	{
		INSTRUCTIONset(addre, LCD_SETCGRAMADDR, str[i]);	
	}
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	08 95       	ret

000004ca <adc_init>:
ADC initializing
*************************************************************************/

void adc_init(void)
{
	ADCSRA  = (1 << ADEN) | (7 << ADPS0); //div 128 i.e. 125kHz
 4ca:	87 e8       	ldi	r24, 0x87	; 135
 4cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX = (1 << REFS0); //Internal 5V (AVcc)
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4d6:	08 95       	ret

000004d8 <read_adc>:
{
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	int i = 0;
	int average = 0;
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
uint16_t read_adc(uint8_t channel)
{
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	int i = 0;
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	50 e0       	ldi	r21, 0x00	; 0
	int average = 0;
	
	while(i<=9)
 4e0:	23 c0       	rjmp	.+70     	; 0x528 <read_adc+0x50>
	{
		ADMUX &= 0XF0;         //clearing channels
 4e2:	ec e7       	ldi	r30, 0x7C	; 124
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	90 81       	ld	r25, Z
 4e8:	90 7f       	andi	r25, 0xF0	; 240
 4ea:	90 83       	st	Z, r25
		ADMUX |= channel;      //defining channel value
 4ec:	90 81       	ld	r25, Z
 4ee:	98 2b       	or	r25, r24
 4f0:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADSC); //start new conversion
 4f2:	ea e7       	ldi	r30, 0x7A	; 122
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	90 81       	ld	r25, Z
 4f8:	90 64       	ori	r25, 0x40	; 64
 4fa:	90 83       	st	Z, r25
		while (ADCSRA & (1 << ADSC)); //wait for completion
 4fc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 500:	96 fd       	sbrc	r25, 6
 502:	fc cf       	rjmp	.-8      	; 0x4fc <read_adc+0x24>
		
		adcl = ADCL;
 504:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
		adch = ADCH;
 508:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		average = average + (adch << 8 | adcl);
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	32 2f       	mov	r19, r18
 510:	22 27       	eor	r18, r18
 512:	29 2b       	or	r18, r25
 514:	62 0f       	add	r22, r18
 516:	73 1f       	adc	r23, r19
		
		i++;
 518:	4f 5f       	subi	r20, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	ef e1       	ldi	r30, 0x1F	; 31
 51e:	f3 e0       	ldi	r31, 0x03	; 3
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <read_adc+0x48>
 524:	00 c0       	rjmp	.+0      	; 0x526 <read_adc+0x4e>
 526:	00 00       	nop
	uint8_t adch = 0;
	
	int i = 0;
	int average = 0;
	
	while(i<=9)
 528:	4a 30       	cpi	r20, 0x0A	; 10
 52a:	51 05       	cpc	r21, r1
 52c:	d4 f2       	brlt	.-76     	; 0x4e2 <read_adc+0xa>
		average = average + (adch << 8 | adcl);
		
		i++;
		_delay_us(200);
	}
	return average / 10;           //return the value (word)
 52e:	cb 01       	movw	r24, r22
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodhi4>
 538:	cb 01       	movw	r24, r22
}
 53a:	08 95       	ret

0000053c <reverse>:
*************************************************************************/

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
 53c:	61 50       	subi	r22, 0x01	; 1
 53e:	71 09       	sbc	r23, r1
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j) {
 544:	0e c0       	rjmp	.+28     	; 0x562 <reverse+0x26>
		temp = str[i];
 546:	dc 01       	movw	r26, r24
 548:	a2 0f       	add	r26, r18
 54a:	b3 1f       	adc	r27, r19
 54c:	4c 91       	ld	r20, X
		str[i] = str[j];
 54e:	fc 01       	movw	r30, r24
 550:	e6 0f       	add	r30, r22
 552:	f7 1f       	adc	r31, r23
 554:	50 81       	ld	r21, Z
 556:	5c 93       	st	X, r21
		str[j] = temp;
 558:	40 83       	st	Z, r20
		i++;
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
 55e:	61 50       	subi	r22, 0x01	; 1
 560:	71 09       	sbc	r23, r1

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
 562:	26 17       	cp	r18, r22
 564:	37 07       	cpc	r19, r23
 566:	7c f3       	brlt	.-34     	; 0x546 <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
 568:	08 95       	ret

0000056a <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	8b 01       	movw	r16, r22
 574:	9a 01       	movw	r18, r20
	int i = 0;
 576:	c0 e0       	ldi	r28, 0x00	; 0
 578:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
 57a:	0c c0       	rjmp	.+24     	; 0x594 <intToStr+0x2a>
		str[i++] = (x % 10) + '0';
 57c:	f8 01       	movw	r30, r16
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	6a e0       	ldi	r22, 0x0A	; 10
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodhi4>
 58a:	80 5d       	subi	r24, 0xD0	; 208
 58c:	80 83       	st	Z, r24
		x = x / 10;
 58e:	86 2f       	mov	r24, r22
 590:	97 2f       	mov	r25, r23
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
 592:	21 96       	adiw	r28, 0x01	; 1
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	91 f7       	brne	.-28     	; 0x57c <intToStr+0x12>
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <intToStr+0x3c>
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
 59a:	f8 01       	movw	r30, r16
 59c:	ec 0f       	add	r30, r28
 59e:	fd 1f       	adc	r31, r29
 5a0:	80 e3       	ldi	r24, 0x30	; 48
 5a2:	80 83       	st	Z, r24
 5a4:	21 96       	adiw	r28, 0x01	; 1
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 5a6:	c2 17       	cp	r28, r18
 5a8:	d3 07       	cpc	r29, r19
 5aa:	bc f3       	brlt	.-18     	; 0x59a <intToStr+0x30>
	str[i++] = '0';
	
	reverse(str, i);
 5ac:	be 01       	movw	r22, r28
 5ae:	c8 01       	movw	r24, r16
 5b0:	0e 94 9e 02 	call	0x53c	; 0x53c <reverse>
	str[i] = '\0';
 5b4:	f8 01       	movw	r30, r16
 5b6:	ec 0f       	add	r30, r28
 5b8:	fd 1f       	adc	r31, r29
 5ba:	10 82       	st	Z, r1
	return i;
}
 5bc:	ce 01       	movw	r24, r28
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	08 95       	ret

000005c8 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 5c8:	4f 92       	push	r4
 5ca:	5f 92       	push	r5
 5cc:	6f 92       	push	r6
 5ce:	7f 92       	push	r7
 5d0:	8f 92       	push	r8
 5d2:	9f 92       	push	r9
 5d4:	af 92       	push	r10
 5d6:	bf 92       	push	r11
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	2b 01       	movw	r4, r22
 5e6:	3c 01       	movw	r6, r24
 5e8:	7a 01       	movw	r14, r20
 5ea:	89 01       	movw	r16, r18
	// Extract integer part
	int ipart = (int)n;
 5ec:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
 5f0:	4b 01       	movw	r8, r22
 5f2:	5c 01       	movw	r10, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
 5f4:	07 2e       	mov	r0, r23
 5f6:	00 0c       	add	r0, r0
 5f8:	88 0b       	sbc	r24, r24
 5fa:	99 0b       	sbc	r25, r25
 5fc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	c3 01       	movw	r24, r6
 606:	b2 01       	movw	r22, r4
 608:	0e 94 46 03 	call	0x68c	; 0x68c <__subsf3>
 60c:	2b 01       	movw	r4, r22
 60e:	3c 01       	movw	r6, r24
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	b7 01       	movw	r22, r14
 616:	c4 01       	movw	r24, r8
 618:	0e 94 b5 02 	call	0x56a	; 0x56a <intToStr>
 61c:	ec 01       	movw	r28, r24
	
	// check for display option after point
	if (afterpoint != 0) {
 61e:	01 15       	cp	r16, r1
 620:	11 05       	cpc	r17, r1
 622:	29 f1       	breq	.+74     	; 0x66e <ftoa+0xa6>
		res[i] = '.'; // add dot
 624:	f7 01       	movw	r30, r14
 626:	e8 0f       	add	r30, r24
 628:	f9 1f       	adc	r31, r25
 62a:	8e e2       	ldi	r24, 0x2E	; 46
 62c:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 62e:	b8 01       	movw	r22, r16
 630:	01 2e       	mov	r0, r17
 632:	00 0c       	add	r0, r0
 634:	88 0b       	sbc	r24, r24
 636:	99 0b       	sbc	r25, r25
 638:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 63c:	9b 01       	movw	r18, r22
 63e:	ac 01       	movw	r20, r24
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e2       	ldi	r24, 0x20	; 32
 646:	91 e4       	ldi	r25, 0x41	; 65
 648:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <pow>
 64c:	9b 01       	movw	r18, r22
 64e:	ac 01       	movw	r20, r24
 650:	c3 01       	movw	r24, r6
 652:	b2 01       	movw	r22, r4
 654:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
 658:	21 96       	adiw	r28, 0x01	; 1
 65a:	ce 0d       	add	r28, r14
 65c:	df 1d       	adc	r29, r15
 65e:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
 662:	dc 01       	movw	r26, r24
 664:	cb 01       	movw	r24, r22
 666:	a8 01       	movw	r20, r16
 668:	be 01       	movw	r22, r28
 66a:	0e 94 b5 02 	call	0x56a	; 0x56a <intToStr>
	}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	bf 90       	pop	r11
 67c:	af 90       	pop	r10
 67e:	9f 90       	pop	r9
 680:	8f 90       	pop	r8
 682:	7f 90       	pop	r7
 684:	6f 90       	pop	r6
 686:	5f 90       	pop	r5
 688:	4f 90       	pop	r4
 68a:	08 95       	ret

0000068c <__subsf3>:
 68c:	50 58       	subi	r21, 0x80	; 128

0000068e <__addsf3>:
 68e:	bb 27       	eor	r27, r27
 690:	aa 27       	eor	r26, r26
 692:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 696:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 69a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 69e:	38 f0       	brcs	.+14     	; 0x6ae <__addsf3+0x20>
 6a0:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__addsf3+0x20>
 6a6:	39 f4       	brne	.+14     	; 0x6b6 <__addsf3+0x28>
 6a8:	9f 3f       	cpi	r25, 0xFF	; 255
 6aa:	19 f4       	brne	.+6      	; 0x6b2 <__addsf3+0x24>
 6ac:	26 f4       	brtc	.+8      	; 0x6b6 <__addsf3+0x28>
 6ae:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 6b2:	0e f4       	brtc	.+2      	; 0x6b6 <__addsf3+0x28>
 6b4:	e0 95       	com	r30
 6b6:	e7 fb       	bst	r30, 7
 6b8:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>

000006bc <__addsf3x>:
 6bc:	e9 2f       	mov	r30, r25
 6be:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 6c2:	58 f3       	brcs	.-42     	; 0x69a <__addsf3+0xc>
 6c4:	ba 17       	cp	r27, r26
 6c6:	62 07       	cpc	r22, r18
 6c8:	73 07       	cpc	r23, r19
 6ca:	84 07       	cpc	r24, r20
 6cc:	95 07       	cpc	r25, r21
 6ce:	20 f0       	brcs	.+8      	; 0x6d8 <__addsf3x+0x1c>
 6d0:	79 f4       	brne	.+30     	; 0x6f0 <__addsf3x+0x34>
 6d2:	a6 f5       	brtc	.+104    	; 0x73c <__addsf3x+0x80>
 6d4:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_zero>
 6d8:	0e f4       	brtc	.+2      	; 0x6dc <__addsf3x+0x20>
 6da:	e0 95       	com	r30
 6dc:	0b 2e       	mov	r0, r27
 6de:	ba 2f       	mov	r27, r26
 6e0:	a0 2d       	mov	r26, r0
 6e2:	0b 01       	movw	r0, r22
 6e4:	b9 01       	movw	r22, r18
 6e6:	90 01       	movw	r18, r0
 6e8:	0c 01       	movw	r0, r24
 6ea:	ca 01       	movw	r24, r20
 6ec:	a0 01       	movw	r20, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	ff 27       	eor	r31, r31
 6f2:	59 1b       	sub	r21, r25
 6f4:	99 f0       	breq	.+38     	; 0x71c <__addsf3x+0x60>
 6f6:	59 3f       	cpi	r21, 0xF9	; 249
 6f8:	50 f4       	brcc	.+20     	; 0x70e <__addsf3x+0x52>
 6fa:	50 3e       	cpi	r21, 0xE0	; 224
 6fc:	68 f1       	brcs	.+90     	; 0x758 <__addsf3x+0x9c>
 6fe:	1a 16       	cp	r1, r26
 700:	f0 40       	sbci	r31, 0x00	; 0
 702:	a2 2f       	mov	r26, r18
 704:	23 2f       	mov	r18, r19
 706:	34 2f       	mov	r19, r20
 708:	44 27       	eor	r20, r20
 70a:	58 5f       	subi	r21, 0xF8	; 248
 70c:	f3 cf       	rjmp	.-26     	; 0x6f4 <__addsf3x+0x38>
 70e:	46 95       	lsr	r20
 710:	37 95       	ror	r19
 712:	27 95       	ror	r18
 714:	a7 95       	ror	r26
 716:	f0 40       	sbci	r31, 0x00	; 0
 718:	53 95       	inc	r21
 71a:	c9 f7       	brne	.-14     	; 0x70e <__addsf3x+0x52>
 71c:	7e f4       	brtc	.+30     	; 0x73c <__addsf3x+0x80>
 71e:	1f 16       	cp	r1, r31
 720:	ba 0b       	sbc	r27, r26
 722:	62 0b       	sbc	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	ba f0       	brmi	.+46     	; 0x758 <__addsf3x+0x9c>
 72a:	91 50       	subi	r25, 0x01	; 1
 72c:	a1 f0       	breq	.+40     	; 0x756 <__addsf3x+0x9a>
 72e:	ff 0f       	add	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	c2 f7       	brpl	.-16     	; 0x72a <__addsf3x+0x6e>
 73a:	0e c0       	rjmp	.+28     	; 0x758 <__addsf3x+0x9c>
 73c:	ba 0f       	add	r27, r26
 73e:	62 1f       	adc	r22, r18
 740:	73 1f       	adc	r23, r19
 742:	84 1f       	adc	r24, r20
 744:	48 f4       	brcc	.+18     	; 0x758 <__addsf3x+0x9c>
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f7 95       	ror	r31
 750:	9e 3f       	cpi	r25, 0xFE	; 254
 752:	08 f0       	brcs	.+2      	; 0x756 <__addsf3x+0x9a>
 754:	b0 cf       	rjmp	.-160    	; 0x6b6 <__addsf3+0x28>
 756:	93 95       	inc	r25
 758:	88 0f       	add	r24, r24
 75a:	08 f0       	brcs	.+2      	; 0x75e <__addsf3x+0xa2>
 75c:	99 27       	eor	r25, r25
 75e:	ee 0f       	add	r30, r30
 760:	97 95       	ror	r25
 762:	87 95       	ror	r24
 764:	08 95       	ret

00000766 <__fixsfsi>:
 766:	0e 94 ba 03 	call	0x774	; 0x774 <__fixunssfsi>
 76a:	68 94       	set
 76c:	b1 11       	cpse	r27, r1
 76e:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 772:	08 95       	ret

00000774 <__fixunssfsi>:
 774:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 778:	88 f0       	brcs	.+34     	; 0x79c <__fixunssfsi+0x28>
 77a:	9f 57       	subi	r25, 0x7F	; 127
 77c:	98 f0       	brcs	.+38     	; 0x7a4 <__fixunssfsi+0x30>
 77e:	b9 2f       	mov	r27, r25
 780:	99 27       	eor	r25, r25
 782:	b7 51       	subi	r27, 0x17	; 23
 784:	b0 f0       	brcs	.+44     	; 0x7b2 <__fixunssfsi+0x3e>
 786:	e1 f0       	breq	.+56     	; 0x7c0 <__fixunssfsi+0x4c>
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a f0       	brmi	.+6      	; 0x798 <__fixunssfsi+0x24>
 792:	ba 95       	dec	r27
 794:	c9 f7       	brne	.-14     	; 0x788 <__fixunssfsi+0x14>
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <__fixunssfsi+0x4c>
 798:	b1 30       	cpi	r27, 0x01	; 1
 79a:	91 f0       	breq	.+36     	; 0x7c0 <__fixunssfsi+0x4c>
 79c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_zero>
 7a0:	b1 e0       	ldi	r27, 0x01	; 1
 7a2:	08 95       	ret
 7a4:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_zero>
 7a8:	67 2f       	mov	r22, r23
 7aa:	78 2f       	mov	r23, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	b8 5f       	subi	r27, 0xF8	; 248
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <__fixunssfsi+0x4c>
 7b2:	b9 3f       	cpi	r27, 0xF9	; 249
 7b4:	cc f3       	brlt	.-14     	; 0x7a8 <__fixunssfsi+0x34>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b3 95       	inc	r27
 7be:	d9 f7       	brne	.-10     	; 0x7b6 <__fixunssfsi+0x42>
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__fixunssfsi+0x5c>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__floatunsisf>:
 7d2:	e8 94       	clt
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <__floatsisf+0x12>

000007d6 <__floatsisf>:
 7d6:	97 fb       	bst	r25, 7
 7d8:	3e f4       	brtc	.+14     	; 0x7e8 <__floatsisf+0x12>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	99 23       	and	r25, r25
 7ea:	a9 f0       	breq	.+42     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7ec:	f9 2f       	mov	r31, r25
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	bb 27       	eor	r27, r27
 7f2:	93 95       	inc	r25
 7f4:	f6 95       	lsr	r31
 7f6:	87 95       	ror	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	b7 95       	ror	r27
 7fe:	f1 11       	cpse	r31, r1
 800:	f8 cf       	rjmp	.-16     	; 0x7f2 <__floatsisf+0x1c>
 802:	fa f4       	brpl	.+62     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 804:	bb 0f       	add	r27, r27
 806:	11 f4       	brne	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	60 ff       	sbrs	r22, 0
 80a:	1b c0       	rjmp	.+54     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 80c:	6f 5f       	subi	r22, 0xFF	; 255
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	16 c0       	rjmp	.+44     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 816:	88 23       	and	r24, r24
 818:	11 f0       	breq	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 81e:	77 23       	and	r23, r23
 820:	21 f0       	breq	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 822:	9e e8       	ldi	r25, 0x8E	; 142
 824:	87 2f       	mov	r24, r23
 826:	76 2f       	mov	r23, r22
 828:	05 c0       	rjmp	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82a:	66 23       	and	r22, r22
 82c:	71 f0       	breq	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82e:	96 e8       	ldi	r25, 0x86	; 134
 830:	86 2f       	mov	r24, r22
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	2a f0       	brmi	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	9a 95       	dec	r25
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	da f7       	brpl	.-10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 842:	88 0f       	add	r24, r24
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__fp_inf>:
 84c:	97 f9       	bld	r25, 7
 84e:	9f 67       	ori	r25, 0x7F	; 127
 850:	80 e8       	ldi	r24, 0x80	; 128
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	08 95       	ret

00000858 <__fp_nan>:
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	80 ec       	ldi	r24, 0xC0	; 192
 85c:	08 95       	ret

0000085e <__fp_pscA>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	16 16       	cp	r1, r22
 864:	17 06       	cpc	r1, r23
 866:	18 06       	cpc	r1, r24
 868:	09 06       	cpc	r0, r25
 86a:	08 95       	ret

0000086c <__fp_pscB>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	05 06       	cpc	r0, r21
 878:	08 95       	ret

0000087a <__fp_round>:
 87a:	09 2e       	mov	r0, r25
 87c:	03 94       	inc	r0
 87e:	00 0c       	add	r0, r0
 880:	11 f4       	brne	.+4      	; 0x886 <__fp_round+0xc>
 882:	88 23       	and	r24, r24
 884:	52 f0       	brmi	.+20     	; 0x89a <__fp_round+0x20>
 886:	bb 0f       	add	r27, r27
 888:	40 f4       	brcc	.+16     	; 0x89a <__fp_round+0x20>
 88a:	bf 2b       	or	r27, r31
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0x18>
 88e:	60 ff       	sbrs	r22, 0
 890:	04 c0       	rjmp	.+8      	; 0x89a <__fp_round+0x20>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__fp_split3>:
 89c:	57 fd       	sbrc	r21, 7
 89e:	90 58       	subi	r25, 0x80	; 128
 8a0:	44 0f       	add	r20, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	59 f0       	breq	.+22     	; 0x8bc <__fp_splitA+0x10>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__fp_splitA+0x1a>
 8aa:	47 95       	ror	r20

000008ac <__fp_splitA>:
 8ac:	88 0f       	add	r24, r24
 8ae:	97 fb       	bst	r25, 7
 8b0:	99 1f       	adc	r25, r25
 8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_splitA+0x20>
 8b4:	9f 3f       	cpi	r25, 0xFF	; 255
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <__fp_splitA+0x2a>
 8b8:	87 95       	ror	r24
 8ba:	08 95       	ret
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	14 06       	cpc	r1, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <__fp_split3+0xe>
 8c6:	46 95       	lsr	r20
 8c8:	f1 df       	rcall	.-30     	; 0x8ac <__fp_splitA>
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__fp_splitA+0x30>
 8cc:	16 16       	cp	r1, r22
 8ce:	17 06       	cpc	r1, r23
 8d0:	18 06       	cpc	r1, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	f1 cf       	rjmp	.-30     	; 0x8b8 <__fp_splitA+0xc>
 8d6:	86 95       	lsr	r24
 8d8:	71 05       	cpc	r23, r1
 8da:	61 05       	cpc	r22, r1
 8dc:	08 94       	sec
 8de:	08 95       	ret

000008e0 <__fp_zero>:
 8e0:	e8 94       	clt

000008e2 <__fp_szero>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	66 27       	eor	r22, r22
 8e6:	77 27       	eor	r23, r23
 8e8:	cb 01       	movw	r24, r22
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__mulsf3>:
 8ee:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3x>
 8f2:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 8f6:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 8fa:	38 f0       	brcs	.+14     	; 0x90a <__stack+0xb>
 8fc:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 900:	20 f0       	brcs	.+8      	; 0x90a <__stack+0xb>
 902:	95 23       	and	r25, r21
 904:	11 f0       	breq	.+4      	; 0x90a <__stack+0xb>
 906:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 90a:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 90e:	11 24       	eor	r1, r1
 910:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>

00000914 <__mulsf3x>:
 914:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 918:	70 f3       	brcs	.-36     	; 0x8f6 <__mulsf3+0x8>

0000091a <__mulsf3_pse>:
 91a:	95 9f       	mul	r25, r21
 91c:	c1 f3       	breq	.-16     	; 0x90e <__stack+0xf>
 91e:	95 0f       	add	r25, r21
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	55 1f       	adc	r21, r21
 924:	62 9f       	mul	r22, r18
 926:	f0 01       	movw	r30, r0
 928:	72 9f       	mul	r23, r18
 92a:	bb 27       	eor	r27, r27
 92c:	f0 0d       	add	r31, r0
 92e:	b1 1d       	adc	r27, r1
 930:	63 9f       	mul	r22, r19
 932:	aa 27       	eor	r26, r26
 934:	f0 0d       	add	r31, r0
 936:	b1 1d       	adc	r27, r1
 938:	aa 1f       	adc	r26, r26
 93a:	64 9f       	mul	r22, r20
 93c:	66 27       	eor	r22, r22
 93e:	b0 0d       	add	r27, r0
 940:	a1 1d       	adc	r26, r1
 942:	66 1f       	adc	r22, r22
 944:	82 9f       	mul	r24, r18
 946:	22 27       	eor	r18, r18
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	62 1f       	adc	r22, r18
 94e:	73 9f       	mul	r23, r19
 950:	b0 0d       	add	r27, r0
 952:	a1 1d       	adc	r26, r1
 954:	62 1f       	adc	r22, r18
 956:	83 9f       	mul	r24, r19
 958:	a0 0d       	add	r26, r0
 95a:	61 1d       	adc	r22, r1
 95c:	22 1f       	adc	r18, r18
 95e:	74 9f       	mul	r23, r20
 960:	33 27       	eor	r19, r19
 962:	a0 0d       	add	r26, r0
 964:	61 1d       	adc	r22, r1
 966:	23 1f       	adc	r18, r19
 968:	84 9f       	mul	r24, r20
 96a:	60 0d       	add	r22, r0
 96c:	21 1d       	adc	r18, r1
 96e:	82 2f       	mov	r24, r18
 970:	76 2f       	mov	r23, r22
 972:	6a 2f       	mov	r22, r26
 974:	11 24       	eor	r1, r1
 976:	9f 57       	subi	r25, 0x7F	; 127
 978:	50 40       	sbci	r21, 0x00	; 0
 97a:	9a f0       	brmi	.+38     	; 0x9a2 <__mulsf3_pse+0x88>
 97c:	f1 f0       	breq	.+60     	; 0x9ba <__mulsf3_pse+0xa0>
 97e:	88 23       	and	r24, r24
 980:	4a f0       	brmi	.+18     	; 0x994 <__mulsf3_pse+0x7a>
 982:	ee 0f       	add	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	bb 1f       	adc	r27, r27
 988:	66 1f       	adc	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	a9 f7       	brne	.-22     	; 0x97e <__mulsf3_pse+0x64>
 994:	9e 3f       	cpi	r25, 0xFE	; 254
 996:	51 05       	cpc	r21, r1
 998:	80 f0       	brcs	.+32     	; 0x9ba <__mulsf3_pse+0xa0>
 99a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 99e:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	e4 f3       	brlt	.-8      	; 0x99e <__mulsf3_pse+0x84>
 9a6:	98 3e       	cpi	r25, 0xE8	; 232
 9a8:	d4 f3       	brlt	.-12     	; 0x99e <__mulsf3_pse+0x84>
 9aa:	86 95       	lsr	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	e7 95       	ror	r30
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <__mulsf3_pse+0x90>
 9ba:	fe 2b       	or	r31, r30
 9bc:	88 0f       	add	r24, r24
 9be:	91 1d       	adc	r25, r1
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	97 f9       	bld	r25, 7
 9c6:	08 95       	ret

000009c8 <pow>:
 9c8:	fa 01       	movw	r30, r20
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	30 96       	adiw	r30, 0x00	; 0
 9d0:	21 05       	cpc	r18, r1
 9d2:	31 05       	cpc	r19, r1
 9d4:	a1 f1       	breq	.+104    	; 0xa3e <pow+0x76>
 9d6:	61 15       	cp	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	61 f4       	brne	.+24     	; 0x9f4 <pow+0x2c>
 9dc:	80 38       	cpi	r24, 0x80	; 128
 9de:	bf e3       	ldi	r27, 0x3F	; 63
 9e0:	9b 07       	cpc	r25, r27
 9e2:	49 f1       	breq	.+82     	; 0xa36 <pow+0x6e>
 9e4:	68 94       	set
 9e6:	90 38       	cpi	r25, 0x80	; 128
 9e8:	81 05       	cpc	r24, r1
 9ea:	61 f0       	breq	.+24     	; 0xa04 <pow+0x3c>
 9ec:	80 38       	cpi	r24, 0x80	; 128
 9ee:	bf ef       	ldi	r27, 0xFF	; 255
 9f0:	9b 07       	cpc	r25, r27
 9f2:	41 f0       	breq	.+16     	; 0xa04 <pow+0x3c>
 9f4:	99 23       	and	r25, r25
 9f6:	4a f5       	brpl	.+82     	; 0xa4a <pow+0x82>
 9f8:	ff 3f       	cpi	r31, 0xFF	; 255
 9fa:	e1 05       	cpc	r30, r1
 9fc:	31 05       	cpc	r19, r1
 9fe:	21 05       	cpc	r18, r1
 a00:	19 f1       	breq	.+70     	; 0xa48 <pow+0x80>
 a02:	e8 94       	clt
 a04:	08 94       	sec
 a06:	e7 95       	ror	r30
 a08:	d9 01       	movw	r26, r18
 a0a:	aa 23       	and	r26, r26
 a0c:	29 f4       	brne	.+10     	; 0xa18 <pow+0x50>
 a0e:	ab 2f       	mov	r26, r27
 a10:	be 2f       	mov	r27, r30
 a12:	f8 5f       	subi	r31, 0xF8	; 248
 a14:	d0 f3       	brcs	.-12     	; 0xa0a <pow+0x42>
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <pow+0x70>
 a18:	ff 5f       	subi	r31, 0xFF	; 255
 a1a:	70 f4       	brcc	.+28     	; 0xa38 <pow+0x70>
 a1c:	a6 95       	lsr	r26
 a1e:	e0 f7       	brcc	.-8      	; 0xa18 <pow+0x50>
 a20:	f7 39       	cpi	r31, 0x97	; 151
 a22:	50 f0       	brcs	.+20     	; 0xa38 <pow+0x70>
 a24:	19 f0       	breq	.+6      	; 0xa2c <pow+0x64>
 a26:	ff 3a       	cpi	r31, 0xAF	; 175
 a28:	38 f4       	brcc	.+14     	; 0xa38 <pow+0x70>
 a2a:	9f 77       	andi	r25, 0x7F	; 127
 a2c:	9f 93       	push	r25
 a2e:	0d d0       	rcall	.+26     	; 0xa4a <pow+0x82>
 a30:	0f 90       	pop	r0
 a32:	07 fc       	sbrc	r0, 7
 a34:	90 58       	subi	r25, 0x80	; 128
 a36:	08 95       	ret
 a38:	46 f0       	brts	.+16     	; 0xa4a <pow+0x82>
 a3a:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	80 e8       	ldi	r24, 0x80	; 128
 a44:	9f e3       	ldi	r25, 0x3F	; 63
 a46:	08 95       	ret
 a48:	4f e7       	ldi	r20, 0x7F	; 127
 a4a:	9f 77       	andi	r25, 0x7F	; 127
 a4c:	5f 93       	push	r21
 a4e:	4f 93       	push	r20
 a50:	3f 93       	push	r19
 a52:	2f 93       	push	r18
 a54:	0e 94 df 05 	call	0xbbe	; 0xbbe <log>
 a58:	2f 91       	pop	r18
 a5a:	3f 91       	pop	r19
 a5c:	4f 91       	pop	r20
 a5e:	5f 91       	pop	r21
 a60:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsf3>
 a64:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <exp>
 a68:	29 f4       	brne	.+10     	; 0xa74 <pow+0xac>
 a6a:	16 f0       	brts	.+4      	; 0xa70 <pow+0xa8>
 a6c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 a70:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_zero>
 a74:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

00000a78 <exp>:
 a78:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 a7c:	a8 f3       	brcs	.-22     	; 0xa68 <pow+0xa0>
 a7e:	96 38       	cpi	r25, 0x86	; 134
 a80:	a0 f7       	brcc	.-24     	; 0xa6a <pow+0xa2>
 a82:	07 f8       	bld	r0, 7
 a84:	0f 92       	push	r0
 a86:	e8 94       	clt
 a88:	2b e3       	ldi	r18, 0x3B	; 59
 a8a:	3a ea       	ldi	r19, 0xAA	; 170
 a8c:	48 eb       	ldi	r20, 0xB8	; 184
 a8e:	5f e7       	ldi	r21, 0x7F	; 127
 a90:	0e 94 8d 04 	call	0x91a	; 0x91a <__mulsf3_pse>
 a94:	0f 92       	push	r0
 a96:	0f 92       	push	r0
 a98:	0f 92       	push	r0
 a9a:	4d b7       	in	r20, 0x3d	; 61
 a9c:	5e b7       	in	r21, 0x3e	; 62
 a9e:	0f 92       	push	r0
 aa0:	0e 94 27 06 	call	0xc4e	; 0xc4e <modf>
 aa4:	e8 e6       	ldi	r30, 0x68	; 104
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_powser>
 aac:	4f 91       	pop	r20
 aae:	5f 91       	pop	r21
 ab0:	ef 91       	pop	r30
 ab2:	ff 91       	pop	r31
 ab4:	e5 95       	asr	r30
 ab6:	ee 1f       	adc	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	49 f0       	breq	.+18     	; 0xace <exp+0x56>
 abc:	fe 57       	subi	r31, 0x7E	; 126
 abe:	e0 68       	ori	r30, 0x80	; 128
 ac0:	44 27       	eor	r20, r20
 ac2:	ee 0f       	add	r30, r30
 ac4:	44 1f       	adc	r20, r20
 ac6:	fa 95       	dec	r31
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <exp+0x4a>
 aca:	41 95       	neg	r20
 acc:	55 0b       	sbc	r21, r21
 ace:	0e 94 a1 05 	call	0xb42	; 0xb42 <ldexp>
 ad2:	0f 90       	pop	r0
 ad4:	07 fe       	sbrs	r0, 7
 ad6:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <inverse>
 ada:	08 95       	ret

00000adc <__fp_powser>:
 adc:	df 93       	push	r29
 ade:	cf 93       	push	r28
 ae0:	1f 93       	push	r17
 ae2:	0f 93       	push	r16
 ae4:	ff 92       	push	r15
 ae6:	ef 92       	push	r14
 ae8:	df 92       	push	r13
 aea:	7b 01       	movw	r14, r22
 aec:	8c 01       	movw	r16, r24
 aee:	68 94       	set
 af0:	06 c0       	rjmp	.+12     	; 0xafe <__fp_powser+0x22>
 af2:	da 2e       	mov	r13, r26
 af4:	ef 01       	movw	r28, r30
 af6:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3x>
 afa:	fe 01       	movw	r30, r28
 afc:	e8 94       	clt
 afe:	a5 91       	lpm	r26, Z+
 b00:	25 91       	lpm	r18, Z+
 b02:	35 91       	lpm	r19, Z+
 b04:	45 91       	lpm	r20, Z+
 b06:	55 91       	lpm	r21, Z+
 b08:	a6 f3       	brts	.-24     	; 0xaf2 <__fp_powser+0x16>
 b0a:	ef 01       	movw	r28, r30
 b0c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 b10:	fe 01       	movw	r30, r28
 b12:	97 01       	movw	r18, r14
 b14:	a8 01       	movw	r20, r16
 b16:	da 94       	dec	r13
 b18:	69 f7       	brne	.-38     	; 0xaf4 <__fp_powser+0x18>
 b1a:	df 90       	pop	r13
 b1c:	ef 90       	pop	r14
 b1e:	ff 90       	pop	r15
 b20:	0f 91       	pop	r16
 b22:	1f 91       	pop	r17
 b24:	cf 91       	pop	r28
 b26:	df 91       	pop	r29
 b28:	08 95       	ret

00000b2a <inverse>:
 b2a:	9b 01       	movw	r18, r22
 b2c:	ac 01       	movw	r20, r24
 b2e:	60 e0       	ldi	r22, 0x00	; 0
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	80 e8       	ldi	r24, 0x80	; 128
 b34:	9f e3       	ldi	r25, 0x3F	; 63
 b36:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__divsf3>
 b3a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 b3e:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_mpack>

00000b42 <ldexp>:
 b42:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 b46:	d8 f3       	brcs	.-10     	; 0xb3e <inverse+0x14>
 b48:	99 23       	and	r25, r25
 b4a:	c9 f3       	breq	.-14     	; 0xb3e <inverse+0x14>
 b4c:	94 0f       	add	r25, r20
 b4e:	51 1d       	adc	r21, r1
 b50:	a3 f3       	brvs	.-24     	; 0xb3a <inverse+0x10>
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	94 f0       	brlt	.+36     	; 0xb7c <ldexp+0x3a>
 b58:	59 f0       	breq	.+22     	; 0xb70 <ldexp+0x2e>
 b5a:	88 23       	and	r24, r24
 b5c:	32 f0       	brmi	.+12     	; 0xb6a <ldexp+0x28>
 b5e:	66 0f       	add	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	91 50       	subi	r25, 0x01	; 1
 b66:	50 40       	sbci	r21, 0x00	; 0
 b68:	c1 f7       	brne	.-16     	; 0xb5a <ldexp+0x18>
 b6a:	9e 3f       	cpi	r25, 0xFE	; 254
 b6c:	51 05       	cpc	r21, r1
 b6e:	2c f7       	brge	.-54     	; 0xb3a <inverse+0x10>
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret
 b7c:	5f 3f       	cpi	r21, 0xFF	; 255
 b7e:	ac f0       	brlt	.+42     	; 0xbaa <ldexp+0x68>
 b80:	98 3e       	cpi	r25, 0xE8	; 232
 b82:	9c f0       	brlt	.+38     	; 0xbaa <ldexp+0x68>
 b84:	bb 27       	eor	r27, r27
 b86:	86 95       	lsr	r24
 b88:	77 95       	ror	r23
 b8a:	67 95       	ror	r22
 b8c:	b7 95       	ror	r27
 b8e:	08 f4       	brcc	.+2      	; 0xb92 <ldexp+0x50>
 b90:	b1 60       	ori	r27, 0x01	; 1
 b92:	93 95       	inc	r25
 b94:	c1 f7       	brne	.-16     	; 0xb86 <ldexp+0x44>
 b96:	bb 0f       	add	r27, r27
 b98:	58 f7       	brcc	.-42     	; 0xb70 <ldexp+0x2e>
 b9a:	11 f4       	brne	.+4      	; 0xba0 <ldexp+0x5e>
 b9c:	60 ff       	sbrs	r22, 0
 b9e:	e8 cf       	rjmp	.-48     	; 0xb70 <ldexp+0x2e>
 ba0:	6f 5f       	subi	r22, 0xFF	; 255
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255
 ba4:	8f 4f       	sbci	r24, 0xFF	; 255
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	e3 cf       	rjmp	.-58     	; 0xb70 <ldexp+0x2e>
 baa:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 bae:	16 f0       	brts	.+4      	; 0xbb4 <ldexp+0x72>
 bb0:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_mpack>
 bb4:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 bb8:	68 94       	set
 bba:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>

00000bbe <log>:
 bbe:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 bc2:	a8 f3       	brcs	.-22     	; 0xbae <ldexp+0x6c>
 bc4:	99 23       	and	r25, r25
 bc6:	c1 f3       	breq	.-16     	; 0xbb8 <ldexp+0x76>
 bc8:	ae f3       	brts	.-22     	; 0xbb4 <ldexp+0x72>
 bca:	df 93       	push	r29
 bcc:	cf 93       	push	r28
 bce:	1f 93       	push	r17
 bd0:	0f 93       	push	r16
 bd2:	ff 92       	push	r15
 bd4:	c9 2f       	mov	r28, r25
 bd6:	dd 27       	eor	r29, r29
 bd8:	88 23       	and	r24, r24
 bda:	2a f0       	brmi	.+10     	; 0xbe6 <log+0x28>
 bdc:	21 97       	sbiw	r28, 0x01	; 1
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	da f7       	brpl	.-10     	; 0xbdc <log+0x1e>
 be6:	20 e0       	ldi	r18, 0x00	; 0
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	40 e8       	ldi	r20, 0x80	; 128
 bec:	5f eb       	ldi	r21, 0xBF	; 191
 bee:	9f e3       	ldi	r25, 0x3F	; 63
 bf0:	88 39       	cpi	r24, 0x98	; 152
 bf2:	20 f0       	brcs	.+8      	; 0xbfc <log+0x3e>
 bf4:	80 3e       	cpi	r24, 0xE0	; 224
 bf6:	38 f0       	brcs	.+14     	; 0xc06 <log+0x48>
 bf8:	21 96       	adiw	r28, 0x01	; 1
 bfa:	8f 77       	andi	r24, 0x7F	; 127
 bfc:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 c00:	e0 e9       	ldi	r30, 0x90	; 144
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	04 c0       	rjmp	.+8      	; 0xc0e <log+0x50>
 c06:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 c0a:	ed eb       	ldi	r30, 0xBD	; 189
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_powser>
 c12:	8b 01       	movw	r16, r22
 c14:	be 01       	movw	r22, r28
 c16:	ec 01       	movw	r28, r24
 c18:	fb 2e       	mov	r15, r27
 c1a:	6f 57       	subi	r22, 0x7F	; 127
 c1c:	71 09       	sbc	r23, r1
 c1e:	75 95       	asr	r23
 c20:	77 1f       	adc	r23, r23
 c22:	88 0b       	sbc	r24, r24
 c24:	99 0b       	sbc	r25, r25
 c26:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 c2a:	28 e1       	ldi	r18, 0x18	; 24
 c2c:	32 e7       	ldi	r19, 0x72	; 114
 c2e:	41 e3       	ldi	r20, 0x31	; 49
 c30:	5f e3       	ldi	r21, 0x3F	; 63
 c32:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3x>
 c36:	af 2d       	mov	r26, r15
 c38:	98 01       	movw	r18, r16
 c3a:	ae 01       	movw	r20, r28
 c3c:	ff 90       	pop	r15
 c3e:	0f 91       	pop	r16
 c40:	1f 91       	pop	r17
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 c4a:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>

00000c4e <modf>:
 c4e:	fa 01       	movw	r30, r20
 c50:	dc 01       	movw	r26, r24
 c52:	aa 0f       	add	r26, r26
 c54:	bb 1f       	adc	r27, r27
 c56:	9b 01       	movw	r18, r22
 c58:	ac 01       	movw	r20, r24
 c5a:	bf 57       	subi	r27, 0x7F	; 127
 c5c:	28 f4       	brcc	.+10     	; 0xc68 <modf+0x1a>
 c5e:	22 27       	eor	r18, r18
 c60:	33 27       	eor	r19, r19
 c62:	44 27       	eor	r20, r20
 c64:	50 78       	andi	r21, 0x80	; 128
 c66:	20 c0       	rjmp	.+64     	; 0xca8 <modf+0x5a>
 c68:	b7 51       	subi	r27, 0x17	; 23
 c6a:	90 f4       	brcc	.+36     	; 0xc90 <modf+0x42>
 c6c:	ab 2f       	mov	r26, r27
 c6e:	00 24       	eor	r0, r0
 c70:	46 95       	lsr	r20
 c72:	37 95       	ror	r19
 c74:	27 95       	ror	r18
 c76:	01 1c       	adc	r0, r1
 c78:	a3 95       	inc	r26
 c7a:	d2 f3       	brmi	.-12     	; 0xc70 <modf+0x22>
 c7c:	00 20       	and	r0, r0
 c7e:	71 f0       	breq	.+28     	; 0xc9c <modf+0x4e>
 c80:	22 0f       	add	r18, r18
 c82:	33 1f       	adc	r19, r19
 c84:	44 1f       	adc	r20, r20
 c86:	b3 95       	inc	r27
 c88:	da f3       	brmi	.-10     	; 0xc80 <modf+0x32>
 c8a:	0e d0       	rcall	.+28     	; 0xca8 <modf+0x5a>
 c8c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__subsf3>
 c90:	61 30       	cpi	r22, 0x01	; 1
 c92:	71 05       	cpc	r23, r1
 c94:	a0 e8       	ldi	r26, 0x80	; 128
 c96:	8a 07       	cpc	r24, r26
 c98:	b9 46       	sbci	r27, 0x69	; 105
 c9a:	30 f4       	brcc	.+12     	; 0xca8 <modf+0x5a>
 c9c:	9b 01       	movw	r18, r22
 c9e:	ac 01       	movw	r20, r24
 ca0:	66 27       	eor	r22, r22
 ca2:	77 27       	eor	r23, r23
 ca4:	88 27       	eor	r24, r24
 ca6:	90 78       	andi	r25, 0x80	; 128
 ca8:	30 96       	adiw	r30, 0x00	; 0
 caa:	21 f0       	breq	.+8      	; 0xcb4 <modf+0x66>
 cac:	20 83       	st	Z, r18
 cae:	31 83       	std	Z+1, r19	; 0x01
 cb0:	42 83       	std	Z+2, r20	; 0x02
 cb2:	53 83       	std	Z+3, r21	; 0x03
 cb4:	08 95       	ret

00000cb6 <__divsf3>:
 cb6:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3x>
 cba:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 cbe:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 cc2:	58 f0       	brcs	.+22     	; 0xcda <__divsf3+0x24>
 cc4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 cc8:	40 f0       	brcs	.+16     	; 0xcda <__divsf3+0x24>
 cca:	29 f4       	brne	.+10     	; 0xcd6 <__divsf3+0x20>
 ccc:	5f 3f       	cpi	r21, 0xFF	; 255
 cce:	29 f0       	breq	.+10     	; 0xcda <__divsf3+0x24>
 cd0:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 cd4:	51 11       	cpse	r21, r1
 cd6:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 cda:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

00000cde <__divsf3x>:
 cde:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 ce2:	68 f3       	brcs	.-38     	; 0xcbe <__divsf3+0x8>

00000ce4 <__divsf3_pse>:
 ce4:	99 23       	and	r25, r25
 ce6:	b1 f3       	breq	.-20     	; 0xcd4 <__divsf3+0x1e>
 ce8:	55 23       	and	r21, r21
 cea:	91 f3       	breq	.-28     	; 0xcd0 <__divsf3+0x1a>
 cec:	95 1b       	sub	r25, r21
 cee:	55 0b       	sbc	r21, r21
 cf0:	bb 27       	eor	r27, r27
 cf2:	aa 27       	eor	r26, r26
 cf4:	62 17       	cp	r22, r18
 cf6:	73 07       	cpc	r23, r19
 cf8:	84 07       	cpc	r24, r20
 cfa:	38 f0       	brcs	.+14     	; 0xd0a <__divsf3_pse+0x26>
 cfc:	9f 5f       	subi	r25, 0xFF	; 255
 cfe:	5f 4f       	sbci	r21, 0xFF	; 255
 d00:	22 0f       	add	r18, r18
 d02:	33 1f       	adc	r19, r19
 d04:	44 1f       	adc	r20, r20
 d06:	aa 1f       	adc	r26, r26
 d08:	a9 f3       	breq	.-22     	; 0xcf4 <__divsf3_pse+0x10>
 d0a:	35 d0       	rcall	.+106    	; 0xd76 <__divsf3_pse+0x92>
 d0c:	0e 2e       	mov	r0, r30
 d0e:	3a f0       	brmi	.+14     	; 0xd1e <__divsf3_pse+0x3a>
 d10:	e0 e8       	ldi	r30, 0x80	; 128
 d12:	32 d0       	rcall	.+100    	; 0xd78 <__divsf3_pse+0x94>
 d14:	91 50       	subi	r25, 0x01	; 1
 d16:	50 40       	sbci	r21, 0x00	; 0
 d18:	e6 95       	lsr	r30
 d1a:	00 1c       	adc	r0, r0
 d1c:	ca f7       	brpl	.-14     	; 0xd10 <__divsf3_pse+0x2c>
 d1e:	2b d0       	rcall	.+86     	; 0xd76 <__divsf3_pse+0x92>
 d20:	fe 2f       	mov	r31, r30
 d22:	29 d0       	rcall	.+82     	; 0xd76 <__divsf3_pse+0x92>
 d24:	66 0f       	add	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	bb 1f       	adc	r27, r27
 d2c:	26 17       	cp	r18, r22
 d2e:	37 07       	cpc	r19, r23
 d30:	48 07       	cpc	r20, r24
 d32:	ab 07       	cpc	r26, r27
 d34:	b0 e8       	ldi	r27, 0x80	; 128
 d36:	09 f0       	breq	.+2      	; 0xd3a <__divsf3_pse+0x56>
 d38:	bb 0b       	sbc	r27, r27
 d3a:	80 2d       	mov	r24, r0
 d3c:	bf 01       	movw	r22, r30
 d3e:	ff 27       	eor	r31, r31
 d40:	93 58       	subi	r25, 0x83	; 131
 d42:	5f 4f       	sbci	r21, 0xFF	; 255
 d44:	3a f0       	brmi	.+14     	; 0xd54 <__divsf3_pse+0x70>
 d46:	9e 3f       	cpi	r25, 0xFE	; 254
 d48:	51 05       	cpc	r21, r1
 d4a:	78 f0       	brcs	.+30     	; 0xd6a <__divsf3_pse+0x86>
 d4c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 d50:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 d54:	5f 3f       	cpi	r21, 0xFF	; 255
 d56:	e4 f3       	brlt	.-8      	; 0xd50 <__divsf3_pse+0x6c>
 d58:	98 3e       	cpi	r25, 0xE8	; 232
 d5a:	d4 f3       	brlt	.-12     	; 0xd50 <__divsf3_pse+0x6c>
 d5c:	86 95       	lsr	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	b7 95       	ror	r27
 d64:	f7 95       	ror	r31
 d66:	9f 5f       	subi	r25, 0xFF	; 255
 d68:	c9 f7       	brne	.-14     	; 0xd5c <__divsf3_pse+0x78>
 d6a:	88 0f       	add	r24, r24
 d6c:	91 1d       	adc	r25, r1
 d6e:	96 95       	lsr	r25
 d70:	87 95       	ror	r24
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret
 d76:	e1 e0       	ldi	r30, 0x01	; 1
 d78:	66 0f       	add	r22, r22
 d7a:	77 1f       	adc	r23, r23
 d7c:	88 1f       	adc	r24, r24
 d7e:	bb 1f       	adc	r27, r27
 d80:	62 17       	cp	r22, r18
 d82:	73 07       	cpc	r23, r19
 d84:	84 07       	cpc	r24, r20
 d86:	ba 07       	cpc	r27, r26
 d88:	20 f0       	brcs	.+8      	; 0xd92 <__divsf3_pse+0xae>
 d8a:	62 1b       	sub	r22, r18
 d8c:	73 0b       	sbc	r23, r19
 d8e:	84 0b       	sbc	r24, r20
 d90:	ba 0b       	sbc	r27, r26
 d92:	ee 1f       	adc	r30, r30
 d94:	88 f7       	brcc	.-30     	; 0xd78 <__divsf3_pse+0x94>
 d96:	e0 95       	com	r30
 d98:	08 95       	ret

00000d9a <__fp_mpack>:
 d9a:	9f 3f       	cpi	r25, 0xFF	; 255
 d9c:	31 f0       	breq	.+12     	; 0xdaa <__fp_mpack_finite+0xc>

00000d9e <__fp_mpack_finite>:
 d9e:	91 50       	subi	r25, 0x01	; 1
 da0:	20 f4       	brcc	.+8      	; 0xdaa <__fp_mpack_finite+0xc>
 da2:	87 95       	ror	r24
 da4:	77 95       	ror	r23
 da6:	67 95       	ror	r22
 da8:	b7 95       	ror	r27
 daa:	88 0f       	add	r24, r24
 dac:	91 1d       	adc	r25, r1
 dae:	96 95       	lsr	r25
 db0:	87 95       	ror	r24
 db2:	97 f9       	bld	r25, 7
 db4:	08 95       	ret

00000db6 <__divmodhi4>:
 db6:	97 fb       	bst	r25, 7
 db8:	07 2e       	mov	r0, r23
 dba:	16 f4       	brtc	.+4      	; 0xdc0 <__divmodhi4+0xa>
 dbc:	00 94       	com	r0
 dbe:	07 d0       	rcall	.+14     	; 0xdce <__divmodhi4_neg1>
 dc0:	77 fd       	sbrc	r23, 7
 dc2:	09 d0       	rcall	.+18     	; 0xdd6 <__divmodhi4_neg2>
 dc4:	0e 94 ef 06 	call	0xdde	; 0xdde <__udivmodhi4>
 dc8:	07 fc       	sbrc	r0, 7
 dca:	05 d0       	rcall	.+10     	; 0xdd6 <__divmodhi4_neg2>
 dcc:	3e f4       	brtc	.+14     	; 0xddc <__divmodhi4_exit>

00000dce <__divmodhi4_neg1>:
 dce:	90 95       	com	r25
 dd0:	81 95       	neg	r24
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	08 95       	ret

00000dd6 <__divmodhi4_neg2>:
 dd6:	70 95       	com	r23
 dd8:	61 95       	neg	r22
 dda:	7f 4f       	sbci	r23, 0xFF	; 255

00000ddc <__divmodhi4_exit>:
 ddc:	08 95       	ret

00000dde <__udivmodhi4>:
 dde:	aa 1b       	sub	r26, r26
 de0:	bb 1b       	sub	r27, r27
 de2:	51 e1       	ldi	r21, 0x11	; 17
 de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__udivmodhi4_ep>

00000de6 <__udivmodhi4_loop>:
 de6:	aa 1f       	adc	r26, r26
 de8:	bb 1f       	adc	r27, r27
 dea:	a6 17       	cp	r26, r22
 dec:	b7 07       	cpc	r27, r23
 dee:	10 f0       	brcs	.+4      	; 0xdf4 <__udivmodhi4_ep>
 df0:	a6 1b       	sub	r26, r22
 df2:	b7 0b       	sbc	r27, r23

00000df4 <__udivmodhi4_ep>:
 df4:	88 1f       	adc	r24, r24
 df6:	99 1f       	adc	r25, r25
 df8:	5a 95       	dec	r21
 dfa:	a9 f7       	brne	.-22     	; 0xde6 <__udivmodhi4_loop>
 dfc:	80 95       	com	r24
 dfe:	90 95       	com	r25
 e00:	bc 01       	movw	r22, r24
 e02:	cd 01       	movw	r24, r26
 e04:	08 95       	ret

00000e06 <_exit>:
 e06:	f8 94       	cli

00000e08 <__stop_program>:
 e08:	ff cf       	rjmp	.-2      	; 0xe08 <__stop_program>
